(load "tool")
;=>nil

(defclass class1
    (defvar ?m_value)
    (defun init (?value)
        (setq ?m_value ?value)
    )
    (defun get () (return ?m_value))
    (defun to-string () (return ?m_value))
)
;=>class1

(defvar ?arr (make-array))
;=>&?arr

(add ?arr (new class1 '("b")))
;=>{class1@un0}

(add ?arr (new class1 '("c")))
;=>{class1@un0,class1@un1}

(add ?arr (new class1 '("a")))
;=>{class1@un0,class1@un1,class1@un2}

(defvar ?list (to-list ?arr))
;=>&?list

(print-list ?list)
;=>nil
;out:
b
c
a

;eof

(defun cmp_class1 ((?o1 class1) (?o2 class1))
    (return (cmp (?o1::get) (?o2::get)))
)
;=>cmp_class1

(defvar ?list2 (sort ?list cmp_class1))
;=>&?list2

(to-string ?list2)
;=>"'(class1@un2 class1@un0 class1@un1)"

(print-list ?list2)
;=>nil
;out:
a
b
c

;eof

