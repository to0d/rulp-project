# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
CXX = ../build/fcx
CCF = ../build/fcf

BLDDIR:=../../build
GTEST_DIR = ../../thirdparty/gtest
TEST_INC_DIR=../../thirdparty/include
STL_INC_DIR=../../stl/include

TEST_SRC_DIR=testcases
TEST_OBJ_DIR=$(BLDDIR)/stl/ut

SOURCES :=$(wildcard $(TEST_SRC_DIR)/*.cpp)
OBJECTS :=$(patsubst $(TEST_SRC_DIR)/%.cpp, $(TEST_OBJ_DIR)/%.o, $(SOURCES))
OBJDEPS :=$(patsubst $(TEST_SRC_DIR)/%.cpp, $(TEST_OBJ_DIR)/%.d, $(SOURCES))

-include $(OBJDEPS) 

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -g -gdwarf-4 `$(CCF) --cxxflags` `$(CCF) --ldflags` -I$(GTEST_DIR)/include -I$(TEST_INC_DIR) -I$(STL_INC_DIR) -Wno-unused-command-line-argument -std=c++17

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = run.out

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	@rm -f $(TESTS) gtest.a gtest_main.a $(TEST_OBJ_DIR)/*.d $(TEST_OBJ_DIR)/*.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(TEST_OBJ_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(TEST_OBJ_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -c $(GTEST_DIR)/src/gtest_main.cc -o $@

gtest.a : gtest-all
	@$(AR) $(ARFLAGS) $@ $^

gtest_main.a : $(TEST_OBJ_DIR)/gtest-all.o $(TEST_OBJ_DIR)/gtest_main.o
	@$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
$(TESTS) : $(OBJECTS) gtest_main.a
	$(CXX) $(CPPFLAGS) -pthread -lstdc++ -lm -lLLVM -lLLVMSupport -lLLVMCore -L$(BLDDIR) $^ -o $@

$(TEST_OBJ_DIR)/%.o : $(TEST_SRC_DIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) -c $< -o $@ -MD -MF $(TEST_OBJ_DIR)/$*.d -MP

